version: '3.7'

networks: 
  parking_network:
    name: parking_network

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"

  db:
    image: 'postgres:13.1-alpine'
    container_name: db
    networks: 
      - parking_network
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root
    volumes: 
      - ./parking_db_Schema.sql:/docker-entrypoint-initdb.d/parking_db_Schema.sql



  # Kafka Broker to be used for micro-service communication
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    container_name: elasticsearch
    networks: 
      - parking_network
    restart: always
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data-volume:/usr/share/elasticsearch/data
    ports:
      - 9200:9200

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.4.0
    networks: 
      - parking_network
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
  
  golangServices:
    image: parking_service
    container_name: parking_service
    networks: 
      - parking_network
    restart: always
    ports: 
      - "8081:8081"
    depends_on: 
      - zookeeper
      - kafka
      - db
      - elasticsearch
      - kibana

volumes:
  elasticsearch-data-volume:
    driver: local  
